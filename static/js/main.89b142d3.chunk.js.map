{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","cardComponent","map","user","i","key","SearchBox","searchField","searchChange","for","type","placeholder","onChange","Scroll","props","style","overflow","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","App","onRequestRobots","isPending","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89b142d3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return ( <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc' >\r\n        <img alt = \"robot\"\r\n        src = { `https://robohash.org/${id}?200x200` }/> \r\n        <div>\r\n        <h2 > { name } </h2> \r\n        <p > { email } </p> \r\n        </div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    console.log(\"CardList\")\r\n    \r\n        const cardComponent = robots.map((user, i) => {\r\n                return ( < Card key = { robots[i].id }\r\n                    id = { robots[i].id }\r\n                    name = { robots[i].name }\r\n                    email = { robots[i].email }\r\n                    />);\r\n                });\r\n            return ( <div > { cardComponent }  </div>\r\n            );\r\n        }\r\n\r\n        export default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    console.log('searchbox')\r\n    return ( \r\n    <div className = 'pa2' >\r\n        <label for=\"robot\">  </label>\r\n        <input className = 'pa3 ba b--green bg-lightest-blue'\r\n        type = 'search'\r\n        placeholder = 'search robots'\r\n        name=\"robot\" \r\n        id=\"robot\"\r\n        onChange = {searchChange}\r\n        /> \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        < div style = {\r\n            {\r\n                overflow: 'hidden',\r\n                overflowY: 'scroll',\r\n                border: '1px solid black',\r\n                height: '800px'\r\n            }\r\n        } >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","  \r\nimport React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return {count: state.count + 1}\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log('CounterButton')\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;","  \r\nimport React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    console.log('Header')\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButton color={'red'} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;"," import React  from 'react';\r\n import { connect } from 'react-redux';\r\n import CardList from '../components/CardList';\r\n import SearchBox from '../components/SearchBox';\r\n import Scroll from '../components/Scroll';\r\n import ErrorBoundry from '../components/ErrorBoundry';\r\n import './App.css';\r\n\r\n\r\n import { setSearchField, requestRobots } from '../redux/actions';\r\nimport Header from '../components/Header';\r\n\r\n\r\n  const mapStateToProps = state => ({\r\n      searchField: state.searchRobots.searchField,\r\n      robots: state.requestRobots.robots,\r\n      isPending: state.requestRobots.isPending,\r\n      error: state.requestRobots.error\r\n  });\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n      return {\r\n          onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n          onRequestRobots: () => dispatch(requestRobots())\r\n        }\r\n  };\r\n\r\n\r\n\r\n class App extends React.Component {\r\n\r\n    \r\n\r\n     componentDidMount() {\r\n         this.props.onRequestRobots();\r\n     }\r\n\r\n     render() {\r\n         const {robots, isPending, searchField, onSearchChange} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n          });\r\n          return isPending ?\r\n          <h1>Loading</h1> :\r\n          ( \r\n             <div className = \" tc\" >\r\n              <Header />\r\n              <SearchBox searchChange={onSearchChange} />\r\n              <Scroll>\r\n                <ErrorBoundry>\r\n                 <CardList robots = {filteredRobots }/>\r\n                </ErrorBoundry>\r\n              </Scroll>\r\n             </div>\r\n         )\r\n     \r\n    }\r\n\r\n }\r\n\r\n\r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED, \r\n    REQUEST_ROBOTS_PENDING \r\n}from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () =>  (dispatch) => {\r\n     dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n     fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(response => response.json())\r\n     .then(data => dispatch({\r\n         type: REQUEST_ROBOTS_SUCCESS,\r\n         payload: data\r\n     }))\r\n     .catch(error => ({\r\n         type: REQUEST_ROBOTS_FAILED,\r\n         payload: error\r\n     }))\r\n\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n    \r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD : \r\n        return { \r\n            ...state, \r\n            searchField: action.payload\r\n        }\r\n        \r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n        error: '',\r\n        robots: []\r\n\r\n}\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING :\r\n            return{\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case REQUEST_ROBOTS_SUCCESS : \r\n        return {\r\n            ...state,\r\n            isPending: false,\r\n            robots: action.payload\r\n        }\r\n        case REQUEST_ROBOTS_FAILED : \r\n        return {\r\n            ...state,\r\n            isPending: false,\r\n            error: action.payload\r\n        }\r\n\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport  thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './redux/reducer';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n    searchRobots,\n    requestRobots\n})\nconst store = \ncreateStore(rootReducer, \n    applyMiddleware(thunkMiddleware, logger)\n    );\n\n\nReactDOM.render( \n<Provider store = {store} >\n   <App />\n</Provider>\n , document.getElementById('root')\n);\n\n\nserviceWorker.register();"],"sourceRoot":""}